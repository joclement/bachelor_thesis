1. Basic Example (as in INSTALL.txt)
launch:
python run.py inputfiles/small_street_flat.osm name='example'

you can get a 2d result view with:
python viewer2d.py outputfiles/small_street_flat_example.zip

2. Advanced Debugging Example:
You can get a 3d debugging view with:
python run.py inputfiles/small_street_flat.osm name='debug' debugLevel=5 debugRays=True
python viewer3d.py outputfiles/small_street_flat_debug.zip [0,0,1]

3. Preparing a file for ns-3:
For usage in ns-3, you will usually need to calculate several virtual transmitter positions in order to place devices arbitrarily later on in ns-3. This calculation will last a bit longer (2 minutes on an an Intel i7)
python run.py inputfiles/small_street_flat.osm name='cover' transmitters='area' stepSize=5

Now you can visualize signal strength distributions for different transmitter postions:
python viewer2d.py outputfiles/small_street_flat_cover.zip [3,2,1]
python viewer2d.py outputfiles/small_street_flat_cover.zip [53,2,1]

4. Scaling:
When playing with the size of the map, the stepSize and the rayNumber, you will soon run into long calculation times. For a slight speedup you can limit the ray launching to a certain area around the transmitter and to positions on streets (the next step will be approx. 10 minutes on an Intel i7):
python run.py inputfiles/sedanplatz.osm name='streets' maxRange=350 stepSize=5 transmitters=[[0,0,1]] receivers='street' rayNumber=100000
Plotting is slightly different, too:
python viewerScattered.py outputfiles/sedanplatz_streets.zip -b
