[genetic_algorithm]
# Population Size
POP_SIZE = integer(min=1) 
# Number of Generations to run the algorithm
GEN_NUM = integer(min=1) 
# which mutation function should be used: 
MUTATE = option(0,1,2) 
# the probability of the mutation on a gen(bit) of an individual, necessary for mutation 
# function nr. 0
MUTATE_IND_PROB = float(0,1)
# the probability for an individual to be mutated
MUTATE_PROB = float(0,1)
# which selection function should be used: 
SELECT = option(0,1,2) 
# the probability for an individual to be selected
SELECT_PROB = float(0,1)
# which reproduction function should be used: 
MATE = option(0,1,2) 
# which init function should be used: 
INIT = option(0,1,2,3,4) 
# which argument should be given to the init function, can be empty, because some function
# don't need an argument
# has to be on of these options: option(integer(min=1),float(0,1),list())
INIT_ARG = list()
# INIT_ARG = option(integer(min=1),float(0,1),list())
# which fitness function should be used: 
FITNESS = option(0,1,2) 
# number of individuals to save in the hall of fame
HOF_NUM = integer(min=0)

[data]
# 0 stands for the prototype data generation, 1 stands for RaLaNS
TYPE = option(0,1)

	[[prototype]]
	# 2 stands for AREA, 3 stands for CUBIC, 4 stands for LIST
	PLACEMENT_TYPE = option(2,3,4)
	#for simple version: the maximum distance to communicate, to receive packets
	MAX_DIST = float(min=0.1)
	#for simple version: the real distance between each cell of the matrix
	REAL_DIST_CELL = float(min=0.1) 
	# border specification of the map
	# TODO improve specification border list
	BORDERS = list(min=4,max=4)
	# the stepsize, which is used between the borders and between the height for the
	# area and the cubic types
	STEPSIZE = float(min=0.1)

		[[[cubic]]]
		COVERAGE_LEVEL = float(min=0.0) # the starting height for the cube
		COVERAGE_MAX_LEVEL = float(min=0.0) # the end height for the cube

		[[[list]]]
		# the positions on the map, which should be evaluated.
		POSITIONS = list(min=1)

	[[ralans]]
	# the path to the file, which contains the result from RaLANS
	# the file needs to be the generated zip file from RaLaNS
	FILENAME = string()
    THRESHOLD = float()
